services:
  # ============================================================================
  # SERVICIOS DE INICIALIZACIÓN (se ejecutan una sola vez)
  # ============================================================================
  
  # Servicio de inicialización para descargar assets automáticamente
  assets-downloader:
    build:
      context: init
      dockerfile: Dockerfile
    volumes:
      - ./assets/:/assets/
    restart: "no"
    networks: [nitro]
    healthcheck:
      test: ["CMD", "test", "-f", "/assets/swf/gamedata/external_variables.txt"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de inicialización de base de datos
  db-initializer:
    build:
      context: init
      dockerfile: db-init.Dockerfile
    env_file:
      - .env
    volumes:
      - ./arcturus/:/sql/
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    networks: [nitro]

  # Servicio para convertir assets usando nitro-converter
  assets-builder:
    build:
      context: assets
    env_file:
      - .env
    volumes:
      - ./assets/configuration.json:/app/configuration.json
      - ./assets/assets:/app/assets
      - ./assets/swf:/app/swf
    depends_on:
      assets-downloader:
        condition: service_completed_successfully
    restart: "no"
    networks: [nitro]

  # ============================================================================
  # SERVICIOS PRINCIPALES
  # ============================================================================

  # Base de datos MySQL
  db:
    image: mysql:8
    depends_on:
      - backup
    env_file:
      - .env
    ports:
      - "3310:3306"
    volumes:
      - ./db/data:/var/lib/mysql
      - ./db/conf.d:/etc/mysql/conf.d
      - ./db/dumps:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s
    restart: unless-stopped
    networks: [nitro]

  # Servicio de backup automático
  backup:
    image: tiredofit/db-backup
    volumes:
      - ./db/backup:/backup
    environment:
      - TIMEZONE=UTC
      - DB_TYPE=mysql
      - DB_HOST=db
      - DB_USER=${MYSQL_USER}
      - DB_PASS=${MYSQL_PASSWORD}
      - DB_NAME=${MYSQL_DATABASE}
      - COMPRESSION=GZ
      - ENABLE_CHECKSUM=TRUE
      - CHECKSUM=SHA1
      - DB_DUMP_BEGIN=0315
      - DB_DUMP_FREQ=1440
      - DB_CLEANUP_TIME=10080
      - CREATE_LATEST_SYMLINK=FALSE
      - CONTAINER_ENABLE_MONITORING=FALSE
    restart: unless-stopped
    networks: [nitro]

  # Emulador Arcturus
  arcturus:
    build:
      context: arcturus
    env_file:
      - .env
    volumes:
      - ./assets/:/app/assets/
    ports:
      - "2096:2096"  # websocket port
      - "3001:3001"  # rcon port
    depends_on:
      db:
        condition: service_healthy
      db-initializer:
        condition: service_completed_successfully
      assets-downloader:
        condition: service_completed_successfully
    restart: unless-stopped
    networks: [nitro]
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2096"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Cliente Nitro
  nitro:
    build:
      context: nitro
    env_file:
      - .env
    volumes:
      - ./nitro/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./nitro/renderer-config.json:/usr/share/nginx/html/renderer-config.json
      - ./nitro/ui-config.json:/usr/share/nginx/html/ui-config.json
    ports:
      - "3000:80"
    depends_on:
      assets-downloader:
        condition: service_completed_successfully
      arcturus:
        condition: service_healthy
    restart: unless-stopped
    networks: [nitro]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servidor de Assets
  assets:
    image: nginx:alpine
    restart: unless-stopped
    depends_on:
      - imgproxy
      # - assets-downloader
      - assets-builder
    env_file:
      - .env
    ports:
      - "8080:80"
    volumes:
      - ./assets/nginx:/etc/nginx/conf.d/
      - ./assets/:/usr/share/nginx/html
    networks: [nitro]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/assets/README.md"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de generación de imágenes
  imager:
    build:
      context: imager
    env_file:
      - .env
    volumes:
      - ./assets/:/app/assets/
    depends_on:
      assets-downloader:
        condition: service_completed_successfully
    restart: unless-stopped
    networks: [nitro]
    healthcheck:
      test: ["CMD", "ps", "aux", "|", "grep", "node"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Proxy de imágenes
  imgproxy:
    image: ghcr.io/willnorris/imageproxy
    volumes:
      - "./assets/usercontent/imageproxy/cache:/tmp/imageproxy"
    env_file:
      - .env
    restart: unless-stopped
    networks: [nitro]

  # CMS AtomCMS
  cms:
    build:
      context: atomcms
    depends_on:
      db:
        condition: service_healthy
      db-initializer:
        condition: service_completed_successfully
      assets:
        condition: service_healthy
      arcturus:
        condition: service_healthy
    ports:
      - "8081:80"
    volumes:
      - ".cms.env:/var/www/html/.env"
      - "./atomcms/storage:/var/www/html/storage/app/public"
      - "./atomcms/logs:/var/www/html/storage/logs"
    restart: unless-stopped
    networks: [nitro]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Servicio de post-inicialización del CMS
  cms-post-init:
    image: alpine:latest
    depends_on:
      cms:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
      apk add --no-cache docker-cli curl &&
      echo '🌐 Esperando que el CMS esté completamente listo...' &&
      sleep 30 &&
      echo '🔑 Generando clave de aplicación del CMS...' &&
      docker compose exec cms php artisan key:generate --force || true &&
      docker compose exec cms php artisan config:cache || true &&
      echo '✅ Configuración del CMS completada!'
      "
    restart: "no"
    networks: [nitro]

networks:
  nitro:
    driver: bridge