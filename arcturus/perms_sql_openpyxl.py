#!/usr/bin/env python3
"""
Script alternativo para generar perms_groups.sql usando openpyxl en lugar de pandas.
Este script es más ligero y no requiere dependencias pesadas.
"""

from openpyxl import load_workbook


def generate_insert_sql(table_name, data):
    """
    Generate an SQL INSERT INTO statement.

    Parameters:
    - table_name (str): The name of the table.
    - data (dict): A dictionary representing the column names and values.

    Returns:
    - str: The generated SQL statement.
    """
    columns = ", ".join(data.keys())
    values = ", ".join([f"'{value}'" for value in data.values()])

    sql_statement = f"INSERT INTO {table_name} ({columns}) VALUES ({values});"
    return sql_statement


def main():
    # Load the Excel file
    excel_file = "perms.xlsx"
    wb = load_workbook(excel_file)
    ws = wb.active

    # Get data from worksheet
    data = []
    headers = []

    # Read headers (first row, skip first column)
    for col in range(2, ws.max_column + 1):
        headers.append(ws.cell(1, col).value)

    # Read data rows
    for row in range(2, ws.max_row + 1):
        row_data = {}
        col_name = ws.cell(row, 1).value

        if col_name is None or str(col_name).strip() == "":
            continue

        row_data["col"] = col_name

        # Read values for each header
        for col_idx, header in enumerate(headers, start=2):
            cell_value = ws.cell(row, col_idx).value
            if cell_value is None:
                cell_value = ""
            row_data[header] = cell_value

        data.append(row_data)

    # Group data by headers (ranks)
    groups = []
    for header in headers:
        group = {}
        for row_data in data:
            col_name = row_data["col"]
            value = row_data.get(header, "")

            if value is None:
                value = ""

            try:
                value = int(value)
            except (ValueError, TypeError):
                pass

            group[col_name] = value
        groups.append(group)

    # Generate SQL file
    with open("perms_groups.sql", "w", encoding="utf-8") as file:
        file.write(f"-- auto generated by openpyxl script\n")
        file.write(f"SET FOREIGN_KEY_CHECKS = 0;\n")
        file.write(f"-- delete existing data\n")
        file.write(f"TRUNCATE permission_group_commands;\n")
        file.write(f"TRUNCATE permission_group_rights;\n")
        file.write(f"TRUNCATE permission_groups;\n")
        file.write(f"-- clear legacy permissions for support of autocms\n")
        file.write(f"TRUNCATE permissions;\n")

        for group in groups:
            if "name" not in group or "id" not in group:
                continue

            file.write(f"-- permission group {group['name']}\n")
            group_id = group["id"]

            # Insert main group record
            group_data = {
                "id": group_id,
                "name": group["name"],
                "description": group.get("description", ""),
                "level": group.get("level", 1),
                "prefix": group.get("prefix", ""),
                "prefix_color": group.get("prefix_color", ""),
                "badge": group.get("badge", ""),
                "room_effect": group.get("room_effect", 0),
                "log_enabled": group.get("log_enabled", 1),
            }

            sql = generate_insert_sql("permission_groups", group_data)
            file.write(sql + "\n")

            # Insert commands
            for key in group.keys():
                if not str(key).startswith("cmd_"):
                    continue
                sql = generate_insert_sql(
                    "permission_group_commands",
                    {
                        "group_id": group_id,
                        "command_name": key,
                        "setting_type": group[key],
                    },
                )
                file.write(sql + "\n")

            # Insert rights
            for key in group.keys():
                if not str(key).startswith("acc_"):
                    continue
                sql = generate_insert_sql(
                    "permission_group_rights",
                    {
                        "group_id": group_id,
                        "right_name": key,
                        "setting_type": group[key],
                    },
                )
                file.write(sql + "\n")

            # Legacy table
            file.write("-- legacy table\n")
            legacy_data = {
                "id": group_id,
                "rank_name": group["name"],
                "prefix": group.get("prefix", ""),
                "prefix_color": group.get("prefix_color", ""),
            }
            sql = generate_insert_sql("permissions", legacy_data)
            file.write(sql + "\n")
            file.write("\n\n")

        file.write(f"SET FOREIGN_KEY_CHECKS = 1;\n")

    print("✅ Archivo perms_groups.sql generado exitosamente!")


if __name__ == "__main__":
    main()
